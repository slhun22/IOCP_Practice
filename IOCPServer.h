#pragma once
#pragma comment(lib, "ws2_32")
#pragma comment(lib, "mswsock.lib")

#include "ClientInfo.h"
#include "Define.h"
#include <thread>
#include <vector>

class IOCPServer {
public:
	IOCPServer(void) {}

	virtual ~IOCPServer(void) {
		//윈속의 사용을 끝낸다.
		WSACleanup();
	}

	bool Init(const UINT32 maxIOWorkerThreadCount_) {
		WSADATA wsaData;

		int nRet = WSAStartup(MAKEWORD(2, 2), &wsaData);
		if (nRet != 0) {
			printf("[에러] WSAStartup()함수 실패 : %d\n", WSAGetLastError());
			return false;
		}

		//연결지향형 TCP, Overlapped I/O 소켓을 생성
		mListenSocket = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, NULL, WSA_FLAG_OVERLAPPED);

		if (mListenSocket == INVALID_SOCKET) {
			printf("[에러] socket()함수 실패 : %d\n", WSAGetLastError());
			return false;
		}

		MaxIOWorkerThreadCount = maxIOWorkerThreadCount_;

		printf("소켓 초기화 성공\n");
		return true;
	}


	//-------서버용 함수-------//
	//서버의 주소정보를 소켓과 연결시키고 접속 요청을 받기 위해
	//소켓을 등록하는 함수
	bool BindandListen(int nBindPort) {
		SOCKADDR_IN stServerAddr;
		stServerAddr.sin_family = AF_INET;
		stServerAddr.sin_port = htons(nBindPort); //서버 포트를 설정한다.
		//어떤 주소에서 들어오는 접속이라도 받아들이겠다.
		//보통 서버라면 이렇게 설정한다. 만약 한 아이피에서만 접속을 받고 싶다면
		//그 주소를 inet_addr함수를 이용해 넣으면 된다.
		stServerAddr.sin_addr.s_addr = htonl(INADDR_ANY);

		//위에서 지정한 서버 주소 정보와 cIOCompletionPort 소켓을 연결한다.
		int nRet = bind(mListenSocket, (SOCKADDR*)&stServerAddr, sizeof(SOCKADDR_IN));
		if (nRet != 0) {
			printf("[에러] bind()함수 실패 : %d\n", WSAGetLastError());
			return false;
		}

		//접속 요청을 받아들이기 위해 cIOCompletionPort소켓을 등록하고
		//접속대기큐를 5개로 설정한다.
		nRet = listen(mListenSocket, 5);
		if (nRet != 0) {
			printf("[에러] listen()함수 실패 : %d\n", WSAGetLastError());
			return false;
		}

		//CompletionPort객체 생성 요청을 한다.
		mIOCPHandle = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, NULL, MaxIOWorkerThreadCount);
		if (mIOCPHandle == NULL) {
			printf("[에러] CreateIoCompletionPort()함수 실패: %d\n", GetLastError());
			return false;
		}

		//accept 요청이 들어오면 IOCP큐로 보내기 위해 listen소켓을 IOCP객체에 연결
		auto hIOCPHandle = CreateIoCompletionPort((HANDLE)mListenSocket, mIOCPHandle, (UINT32)0, 0);
		if (hIOCPHandle == nullptr) {
			printf("[에러] listen socket IOCP bind 실패 : %d\n", WSAGetLastError());
			return false;
		}

		printf("서버 등록 성공..\n");
		return true;
	}

	//접속 요청을 수락하고 메시지를 받아서 처리하는 함수
	bool StartServer(const UINT32 maxClientCount) {
		CreateClient(maxClientCount);

		bool bRet = CreateWorkerThread();
		if (bRet == false) {
			return false;
		}

		bRet = CreateAccepterThread();
		if (bRet == false) {
			return false;
		}

		printf("서버 시작\n");
		return true;
	}

	//생성되어있는 쓰레드를 파괴한다.
	void DestroyThread() {
		mIsWorkerRun = false;
		CloseHandle(mIOCPHandle);

		for (auto& th : mIOWorkerThreads)
			if (th.joinable())
				th.join();

		//Accepter 쓰레드를 종료한다.
		mIsAccepterRun = false;
		closesocket(mListenSocket);

		if (mAccepterThread.joinable())
			mAccepterThread.join();
	}

	void SendMsg(const UINT32 sessionIndex_, const UINT32 dataSize_, char* pData) {
		auto pClient = GetClientInfo(sessionIndex_);
		pClient->SendMsg(dataSize_, pData);
	}


	virtual void OnConnect(const UINT32 clientIdx_) = 0;
	virtual void OnClose(const UINT32 clientIdx_) = 0;
	virtual void OnReceive(const UINT32 clientIdx_, const UINT32 size_, char* pData) = 0;

private:
	void CreateClient(const UINT32 maxClientCount) {
		for (UINT32 i = 0; i < maxClientCount; i++) {
			auto client = new ClientInfo();
			client->Init(i, mIOCPHandle);
			mClientInfos.push_back(client);
		}
	}

	//WaitingThread Queue에서 대기할 쓰레드들을 생성
	bool CreateWorkerThread() {
		mIsWorkerRun = true;

		//waitingThread Queue에 대기 상태로 넣을 쓰레드들 생성 권장되는 개수 : (cpu개수 * 2) + 1
		for (int i = 0; i < MaxIOWorkerThreadCount; i++) {
			mIOWorkerThreads.emplace_back([this]() { WorkerThread(); });
		}

		printf("WorkerThread 시작..\n");
		return true;
	}

	//accept요청을 처리하는 쓰레드 생성
	bool CreateAccepterThread() {
		mIsAccepterRun = true;
		mAccepterThread = std::thread([this]() { AccepterThread(); });

		printf("AccepterThread 시작..\n");
		return true;
	}

	//사용하지 않는 클라이언트 정보 구조체를 반환한다.
	ClientInfo* GetEmptyClientInfo() {
		for (auto& client : mClientInfos) {
			if (!client->IsConnected())
				return client;
		}

		return nullptr;
	}

	ClientInfo* GetClientInfo(const UINT32 sessionIndex) {
		return mClientInfos[sessionIndex];
	}

	//Overlapped I/O작업에 대한 완료 통보를 받아
	//그에 해당하는 처리를 하는 함수
	void WorkerThread() {
		//CompletionKey를 받을 포인터 변수
		ClientInfo* pClientInfo = NULL;
		//함수 호출 성공 여부
		BOOL bSuccess = TRUE;
		//Overlapped I/O작업에서 전송된 데이터 크기
		DWORD dwIoSize = 0;
		//I/O작업을 위해 요청한 Overlapped 구조체를 받을 포인터
		LPOVERLAPPED lpOverlapped = NULL;

		while (mIsWorkerRun) {
			//////////////////////////////////////////////////////
			//이 함수로 인해 쓰레드들은 WaitingThread Queue에
			//대기 상태로 들어가게 된다.
			//완료된 Overlapped I/O작업이 발생하면 IOCP Queue에서
			//완료된 작업을 가져와 뒤 처리를 한다.
			//그리고 PostQueuedCompletionStatus()함수에의해 사용자
			//메세지가 도착되면 쓰레드를 종료한다.
			//////////////////////////////////////////////////////
			bSuccess = GetQueuedCompletionStatus(mIOCPHandle,
				&dwIoSize,	//실제로 전송된 바이트
				(PULONG_PTR)&pClientInfo, //CompletionKey. 어느 클라이언트에게 받은 데이터인가
				&lpOverlapped, //Overlapped IO 객체
				INFINITE); //대기할 시간

			//사용자 쓰레드 종료 메시지 처리.. 실제로는 PostQueue... 구현 안했으므로 여기 안들어감
			if (bSuccess == TRUE && dwIoSize == 0 && lpOverlapped == NULL) {
				mIsWorkerRun = false;
				continue;
			}

			if (lpOverlapped == NULL) {
				continue;
			}

			auto pOverlappedEx = (stOverlappedEx*)lpOverlapped;

			//client가 접속을 끊었을 때..
			if (bSuccess == FALSE || (dwIoSize == 0 && pOverlappedEx->m_eOperation != IOOperation::ACCEPT)) {
				//printf("socket(%d) 접속 끊김\n", (int)pClientInfo->GetSock());
				CloseSocket(pClientInfo);
				continue;
			}


			if (pOverlappedEx->m_eOperation == IOOperation::ACCEPT) {
				pClientInfo = GetClientInfo(pOverlappedEx->SessionIndex);
				if (pClientInfo->AcceptCompletion()) {
					//클라이언트 개수 증가
					++mClientCnt;

					OnConnect(pClientInfo->GetIndex());
				}
				else
					CloseSocket(pClientInfo, true);
			}
			else if (pOverlappedEx->m_eOperation == IOOperation::RECV) {
				OnReceive(pClientInfo->GetIndex(), dwIoSize, pClientInfo->RecvBuffer());			
				pClientInfo->BindRecv();
			}
			else if (pOverlappedEx->m_eOperation == IOOperation::SEND) {
				pClientInfo->Sendcompleted(dwIoSize);
			}
			else {
				printf("Client Index(%d)에서 예외상황\n", (int)pClientInfo->GetIndex());
			}
		}
	}

	//사용자의 접속을 받는 쓰레드
	void AccepterThread() {
		while (mIsAccepterRun) {
			//현재 시간
			auto curTimeSec = chrono::duration_cast<chrono::seconds>(chrono::steady_clock::now().time_since_epoch()).count();

			for (auto client : mClientInfos) {
				if (client->IsConnected()) //이미 연결되어 있는 클라이언트는 패스
					continue;
				if ((UINT64)curTimeSec < client->GetLatestClosedTimeSec()) //PostAccept을 이미 하고 연결 대기 중인 클라이언트는 패스
					continue;

				auto diff = curTimeSec - client->GetLatestClosedTimeSec();
				if (diff <= RE_USE_SESSION_WAIT_TIMESEC) //닫힌지 얼마 안된 client면 사용X
					continue;

				client->PostAccept(mListenSocket, curTimeSec); //Time을 무한대로 변경함. 두번째 if문에서 걸리도록
			}

			this_thread::sleep_for(chrono::milliseconds(32));
		}
	}

	//소켓의 연결을 종료시킨다.
	void CloseSocket(ClientInfo* pClientInfo, bool bIsForce = false) {
		auto clientIndex = pClientInfo->GetIndex();
		pClientInfo->Close(bIsForce);
		OnClose(clientIndex);
	}

	UINT32 MaxIOWorkerThreadCount = 0;

	//클라이언트 정보 저장 구조체
	std::vector<ClientInfo*> mClientInfos;

	//클라이언트의 접속을 받기위한 리슨 소켓
	SOCKET mListenSocket = INVALID_SOCKET;

	//접속 되어있는 클라이언트 수
	int mClientCnt = 0;


	//IO Worker 스레드
	std::vector<std::thread> mIOWorkerThreads;

	//Accept 스레드
	std::thread	mAccepterThread;


	//CompletionPort객체 핸들
	HANDLE mIOCPHandle = INVALID_HANDLE_VALUE;


	//작업 쓰레드 동작 플래그
	bool mIsWorkerRun = true;

	//접속 쓰레드 동작 플래그
	bool mIsAccepterRun = true;
};
